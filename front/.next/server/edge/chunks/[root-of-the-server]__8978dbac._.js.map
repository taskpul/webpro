{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\"\nimport { getRegionMap } from \"./lib/regions\" // assume your helper is there\n\nexport async function middleware(request: NextRequest) {\n  const path = request.nextUrl.pathname\n\n  // ðŸš€ Skip middleware for public endpoints (tenant signup, etc.)\n  if (path.startsWith(\"/public\")) {\n    return NextResponse.next()\n  }\n\n  let redirectUrl = request.nextUrl.href\n  let response = NextResponse.redirect(redirectUrl, 307)\n\n  let cacheIdCookie = request.cookies.get(\"_medusa_cache_id\")\n  let cacheId = cacheIdCookie?.value || crypto.randomUUID()\n\n  const regionMap = await getRegionMap(cacheId)\n  const countryCode = regionMap && (await getCountryCode(request, regionMap))\n\n  const urlHasCountryCode =\n    countryCode && request.nextUrl.pathname.split(\"/\")[1].includes(countryCode)\n\n  if (urlHasCountryCode && cacheIdCookie) {\n    return NextResponse.next()\n  }\n\n  if (urlHasCountryCode && !cacheIdCookie) {\n    response.cookies.set(\"_medusa_cache_id\", cacheId, {\n      maxAge: 60 * 60 * 24,\n    })\n    return response\n  }\n\n  if (request.nextUrl.pathname.includes(\".\")) {\n    return NextResponse.next()\n  }\n\n  const redirectPath =\n    request.nextUrl.pathname === \"/\" ? \"\" : request.nextUrl.pathname\n  const queryString = request.nextUrl.search ? request.nextUrl.search : \"\"\n\n  if (!urlHasCountryCode && countryCode) {\n    redirectUrl = `${request.nextUrl.origin}/${countryCode}${redirectPath}${queryString}`\n    response = NextResponse.redirect(`${redirectUrl}`, 307)\n  } else if (!urlHasCountryCode && !countryCode) {\n    return new NextResponse(\n      \"No valid regions configured. Please set up regions with countries in your Medusa Admin.\",\n      { status: 500 }\n    )\n  }\n\n  return response\n}\n\nexport const config = {\n  matcher: [\n    \"/((?!api|_next/static|_next/image|favicon.ico|images|assets|png|svg|jpg|jpeg|gif|webp|public).*)\",\n  ],\n}\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;;;;;;;;AAGO,eAAe,WAAW,OAAoB;IACnD,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IAErC,gEAAgE;IAChE,IAAI,KAAK,UAAU,CAAC,YAAY;QAC9B,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,IAAI,cAAc,QAAQ,OAAO,CAAC,IAAI;IACtC,IAAI,WAAW,gMAAY,CAAC,QAAQ,CAAC,aAAa;IAElD,IAAI,gBAAgB,QAAQ,OAAO,CAAC,GAAG,CAAC;IACxC,IAAI,UAAU,eAAe,SAAS,OAAO,UAAU;IAEvD,MAAM,YAAY,MAAM,aAAa;IACrC,MAAM,cAAc,aAAc,MAAM,eAAe,SAAS;IAEhE,MAAM,oBACJ,eAAe,QAAQ,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC;IAEjE,IAAI,qBAAqB,eAAe;QACtC,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,IAAI,qBAAqB,CAAC,eAAe;QACvC,SAAS,OAAO,CAAC,GAAG,CAAC,oBAAoB,SAAS;YAChD,QAAQ,KAAK,KAAK;QACpB;QACA,OAAO;IACT;IAEA,IAAI,QAAQ,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM;QAC1C,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,MAAM,eACJ,QAAQ,OAAO,CAAC,QAAQ,KAAK,MAAM,KAAK,QAAQ,OAAO,CAAC,QAAQ;IAClE,MAAM,cAAc,QAAQ,OAAO,CAAC,MAAM,GAAG,QAAQ,OAAO,CAAC,MAAM,GAAG;IAEtE,IAAI,CAAC,qBAAqB,aAAa;QACrC,cAAc,GAAG,QAAQ,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,cAAc,eAAe,aAAa;QACrF,WAAW,gMAAY,CAAC,QAAQ,CAAC,GAAG,aAAa,EAAE;IACrD,OAAO,IAAI,CAAC,qBAAqB,CAAC,aAAa;QAC7C,OAAO,IAAI,gMAAY,CACrB,2FACA;YAAE,QAAQ;QAAI;IAElB;IAEA,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}}]
}